#Working as of 5/11/17

#------------------Edit these variables---------------------#
#Access token generated by an account admin
$auth_token = ''

#If your instance is utah.instructure.com, this is just 'utah'
$school_domain = ''

#No need to edit this
$api_base_url = "https://#{$school_domain}.instructure.com/api/v1/"

#sis_term_id to pull grades for
$term_id = ''

#path to save grade report to locally
$output_report_path = "report.csv"

#host for SFTP connection
$sftp_host = ''

#username for SFTP connection (must have root priveleges)
$sftp_user = ''

#password for SFTP connection
$sftp_password = ''

#----------------------------------------------------------#

#----------------------------------------------------------#
#  Don't edit from here unless you know what you are doing #
#----------------------------------------------------------#
#Required gems - INSTALL THESE BEFORE STARTING
require 'rubygems'
require 'json'
require 'typhoeus'
require 'csv'
require "open-uri"
require 'openssl'
require 'net/sftp'
require 'fileutils'


#----------------------------------------------------------#
#  Creates an Enrollments Provisioning report to pull data #
#----------------------------------------------------------#
def get_users
  #generates an enrollments provisioning report based on the specific term
  response = Typhoeus.post(

            "#{$api_base_url}accounts/1/reports/provisioning_csv",
            headers: { :authorization => 'Bearer ' + $auth_token },
             body: {
               parameters: {
                   :enrollments => true,
                   :enrollment_term_id => "sis_term_id:#{$term_id}"
               }
            }
        )
    #parse JSON data to save in readable array
    data = JSON.parse(response.body)

    if response.code == 200
      #check if report has finishd
      if data["file_url"].nil?
        file_url = get_report_status(data['id'])
      end
    else
      raise "Issue creating report Status: #{response.code}"
    end

  open_csv(file_url)
end



#----------------------------------------------------------#
#  Checks the status of the report generation              #
#----------------------------------------------------------#
def get_report_status(id)
  #check report status
  response = Typhoeus.get(

            "#{$api_base_url}accounts/1/reports/provisioning_csv/#{id}",
            headers: { :authorization => 'Bearer ' + $auth_token },
        )
    #parse JSON data to save in readable array
    data = JSON.parse(response.body)

    if data['file_url'].nil?
      #wait a few seconds and try again
      sleep(3)
      get_report_status(id)
    else
      data["attachment"]['url']
    end
end


#----------------------------------------------------------#
#  Initiates the CSV file generation process               #
#----------------------------------------------------------#
def open_csv(file_url)
  #add CSV headers to report
  CSV.open($output_report_path,"wb+") do |csv|
    csv << ["Student Number", "Course Number", "Section Number",  "Term", "Final Grade", "Final Approved", "Certificate Requirements Met", "Completion Date"]
  end

  #save provisioning file locally
  IO.copy_stream(open(file_url), "provisioning.csv")

  #add data to output report
  CSV.foreach("provisioning.csv", headers: true) do |row|
    user_id = row['canvas_user_id']
    course_id = row['course_id']
    get_grades(user_id,course_id)
  end

  upload_to_sftp($output_report_path)

  #remove locally stored files
  FileUtils.rm("provisioning.csv")
  FileUtils.rm($output_report_path)

end


#----------------------------------------------------------#
#  Pulls grade data from the enrollments                   #
#----------------------------------------------------------#
def get_grades(user_id,course_id)
  #grab enrollment records for students
  response = Typhoeus.get(

            "#{$api_base_url}users/#{user_id}/enrollments",
            headers: { :authorization => 'Bearer ' + $auth_token },
            body: {
                  :type => "StudentEnrollment",
                  :sis_course_id => course_id
           }
        )
    #parse JSON data to save in readable array
    data = JSON.parse(response.body)

    data.each do |enroll|
      sis_user_id = enroll["user"]["sis_user_id"]
      user_name = enroll["user"]["name"]
      sis_section_id = enroll["sis_section_id"]
      sis_course_id = enroll["sis_course_id"]
      completion_date = enroll["updated_at"]

      #check if a letter grade exists, otherwise skip it
      if enroll["grades"].class != NilClass
        grade = enroll["grades"].values.last
      else
        grade = ''
      end

      #write additional data to output report
      CSV.open($output_report_path, "a+") do |csv|
        csv << [sis_user_id, sis_course_id, sis_section_id, $term_id, grade, "Yes", "Yes", completion_date ]
      end
    end

end


#----------------------------------------------------------#
#  Uploads files to an SFTP server                         #
#----------------------------------------------------------#
def upload_to_sftp(file_path)
  Net::SFTP.start($sftp_host, $sftp_user, :password => $sftp_password) do |sftp|
    # upload a file or directory to the remote host
    file_name = "#{Time.now}-report.csv"
    file_name.gsub!(/\s+/, '-')

    sftp.upload!(file_path, "Grades/#{file_name}")
    puts "Uploaded file to #{$sftp_host} at Grades/#{file_name}."
  end
end

puts "Starting Script..."
get_users
puts "Done"
